fprintf(fp,"global  main ;nasm -felf64 sample.asm && gcc -no-pie sample.o && ./a.out");
fprintf(fp,"        extern  printf");
fprintf(fp,"        extern  scanf");
fprintf(fp,"        SECTION .text");
fprintf(fp,"main:");
fprintf(fp,"        mov     rbp,rsp");
fprintf(fp,"        mov     rcx,6");
fprintf(fp,"_label33:   ;Populating up 48 bytes");
fprintf(fp,"        push    rcx    ");
fprintf(fp,"        dec     rcx");
fprintf(fp,"        jnz     _label33");
fprintf(fp,"");
fprintf(fp,"        mov     rax,rbp");
fprintf(fp,"        add     rax,12");
fprintf(fp,"        mov     [rbp+8],rax");
fprintf(fp,"        mov     word [rbp+8+8],2");
fprintf(fp,"        mov     word [rbp+8+10],4");
fprintf(fp,"");
fprintf(fp,"        mov     rax,qword [rbp+8]");
fprintf(fp,"        movsx   rdx,word [rbp+8+8]");
fprintf(fp,"        movsx   rcx,word [rbp+8+10]");
fprintf(fp,"");
fprintf(fp,"        mov rsi,rcx");
fprintf(fp,"        sub rsi,rdx");
fprintf(fp,"        inc rsi");
fprintf(fp,"");
fprintf(fp,"        push    rax");
fprintf(fp,"        push    rbx");
fprintf(fp,"        push    rcx");
fprintf(fp,"        push    rsi");
fprintf(fp,"        push    rbp");
fprintf(fp,"");
fprintf(fp,"        mov     rdi,_formatBooleanArray             ");
fprintf(fp,"        ;mov     rsi,rsi");
fprintf(fp,"        ;mov     rdx,rdx");
fprintf(fp,"        ;mov     rcx,rcx");
fprintf(fp,"        mov     rax,0");
fprintf(fp,"");
fprintf(fp,"        call    printf                  ; printf(format, current_number)");
fprintf(fp,"");
fprintf(fp,"        pop     rbp");
fprintf(fp,"        pop     rsi");
fprintf(fp,"        pop     rcx");
fprintf(fp,"        pop     rbx");
fprintf(fp,"        pop     rax");
fprintf(fp,"");
fprintf(fp,"        mov     rbp,rax");
fprintf(fp,"        mov     rbx,0");
fprintf(fp,"        mov     rcx,rsi");
fprintf(fp,"_label35:");
fprintf(fp,"        push    rbp");
fprintf(fp,"        push    rbx");
fprintf(fp,"        push    rcx");
fprintf(fp,"");
fprintf(fp,"        mov    rdi,_formatBooleanInput");
fprintf(fp,"");
fprintf(fp,"        lea     rsi,[rbp+rbx*2]");
fprintf(fp,"        mov     rbx,0");
fprintf(fp,"        mov     rax,0");
fprintf(fp,"");
fprintf(fp,"        call    scanf                  ; printf(format, current_number)");
fprintf(fp,"");
fprintf(fp,"        pop     rcx");
fprintf(fp,"        pop     rbx     ");
fprintf(fp,"        pop     rbp");
fprintf(fp,"");
fprintf(fp,"        inc     rbx");
fprintf(fp,"        dec     rcx");
fprintf(fp,"        jnz     _label35");
fprintf(fp,"");
fprintf(fp,"        mov     rcx,6");
fprintf(fp,"_label34:   ;Populating up 48 bytes");
fprintf(fp,"        pop    rax    ");
fprintf(fp,"        dec     rcx");
fprintf(fp,"        jnz     _label34");
fprintf(fp,"        ret");
fprintf(fp,"");
fprintf(fp,"        SECTION .data");
fprintf(fp,"_flttmp0:");
fprintf(fp,"        dq  0.1");
fprintf(fp,"_flttmp1:");
fprintf(fp,"        dq  0.5; 64 bit float");
fprintf(fp,"");
fprintf(fp,"_formatIntArray:");
fprintf(fp,"        db  "Enter %hd numbers for integer array from %hi to %hi ", 10, 0");
fprintf(fp,"");
fprintf(fp,"_formatBooleanArray:");
fprintf(fp,"        db  "Enter %hi numbers for boolean array from %hi to %hi ", 10, 0");
fprintf(fp,"");
fprintf(fp,"_formatRealArray:");
fprintf(fp,"        db  "Enter %hi numbers for real array from %hi to %hi ", 10, 0");
fprintf(fp,"");
fprintf(fp,"_formatIntInput:");
fprintf(fp,"        db  "%d",0");
fprintf(fp,"");
fprintf(fp,"_formatIntOutput:");
fprintf(fp,"        db  "%d",10,0");
fprintf(fp,"");
fprintf(fp,"_formatBooleanInput:");
fprintf(fp,"        db  "%d",0");
fprintf(fp,"");
fprintf(fp,"_formatBooleanOutput:");
fprintf(fp,"        db  "%s",10,0");
fprintf(fp,"");
fprintf(fp,"_formatRealInput:");
fprintf(fp,"        db  "%f",0");
fprintf(fp,"");
fprintf(fp,"_formatRealOutput:");
fprintf(fp,"        db  "%f",10,");
